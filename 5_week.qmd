---
title: "An introduction to Google Earth Engine"
output: html_document
bibliography: references.bib
---

::: column-body
- Prior- longer pre-processing time.
- why Google satellite feature in good maps don't have clouds?
`- Imagine u took picture of one place or location every day, some days cloudy (clouds move too), other not. You stack them up,choose the pixel and go through it vertically and choose the best pixel. Best pixel=median pixel (one that is not too bright nor too dark)= cloud free image.
:::

::: column-body
-   script
-   where u can open codes
-   get link
-   to generate link, share it, the person u shared it with can open it and help u troubleshoot it
-   Java script involves a lot of declaring variables, so learn how to declare "var" for gee on script box
-   end with (;)
-   /\* or // instead of \# to remove code/ comment out
-   when you stretch images, keep it in smaller value to not make it appear graded out. Eg: Map.addLayer(srtm, {min: 0, max: 3000}, 'srtm'); - black and white data set
-   0s and 1s
-   layers widget= toggel layers on and off.
-   toggle loss\> off= to view elevation data
-   toggle loss\> on= Black and white data= white (since this layer is for forest data)= there was some forest cover lost at those pixels
:::

![](images/image-1753920189.png)

::: column-bodY
-   Making layers transparent so that u can see through it
-   Why?
-   cos in your stacked data layer, you would wanna look a other layers in the context of your layer on top.
-   **Masking**:
    -   takes a binary image (1s and 0s)
    -   where ever there is **0** it makes the **target image INVISIBLE**
-   So in the code above we are adding a layer *loss* but updating it with an update mask based on itself *updateMask(loss)*
    -   Result: the 0s in the data set= black pixels= INVISIBLE
-   remove- loss (from the widget)
:::

![](images/image-883671221.png){width="546"}

##### Computations with images

![Slope function application](images/image-558678522.png){fig-align="center"}

::: column-body
-   in the above image we use slope function on our srtm data= slope data set displayed on ge
-   *Note* (best practice is to create a **variable** to *create a visualization*)

![](images/image-174618687.png)
:::

##### Spatial Reduction

::: column-body
-   Spatial reduction= zonal stats (GIS).
-   whats does it do?
    -   Takes an area of an image and you characterize the pixel value in some way. How??
    -   summing
    -   Avg
    -   Result: reduce an image to some variable that describes it in someway.
-   focus on the layer scale\
:::

##### Load and filter an image

::: column-body
-   Stretching:
-   we know RGB value is btw 0-255 (remember the 8 bit)
    -   reflectance value: can be negative or can have very varied range
-   what happens in stretch?
-   we take the actual range of values- layers widget\> settings\>custom\> stretch 100%
-   what does it do?
-   it looks at the lowest value and the highest value
-   lowest and highest value= normalize (0-255)
-   output= image
:::

![](images/image-281876599.png){width="571"}

##### Play with image bands

::: column-body
-   create new vizualization var and select bands
-   for true color vizualization we use red (B4 band), green (B3) and blue bands (B2)
-   B5'(Near infrared), 'B4', 'B3'= False color infrared
:::

##### Reducing image collection

::: column-body
-   ee.Algorithms.Landsat.simpleComposite gives a good outout image removing all the clouds.
:::

##### Compute NDVI

::: column-body
![](images/image-913015119.png)

-   always remember you have to tell in code which is ur infrared band and red band.
-   why?- as band numbers differ
-   darker green= healthy vegetation
:::

##### Chart NDVI over time

::: column-body
-   looking at cycle of change
:::

##### Export Imagery

::: column-body
-   look under "task"
-   exporting data format- geotiff
-   run the code and you would get the image in ur google drive RGB, PNG and Geo tiff
:::

##### Sentinel Dam Inundation

::: column-body
-   get median for the desired bands\> add the layers to the map= median composite
-   we are trying to Classify
-   our data sets: has many bands\
-   but we can visualize only 3 bands
-   But i can use the information from all the bands for my image classification
-   remember the spectral curve?
    -   trying to discriminate the target base on the diversions of those spectral curves
:::

##### Google Earth Engine Catalogue

::: column-body
-   Data sets available
-   can be searched through Tags
-   T21 the brightness temp
-   every data set- sample script to guide
:::

::: column-body
**Reference Material**

-   [arcg.is](https://arcg.is/0DmS590): Introduction to Complete Beginners
-   [earthengine](https://signup.earthengine.google.com): Sample script book
-   [youtube](https://youtu.be/oAElakLgCdA): Video with piratical
-   [Earth Engine data Catalog](https://developers.google.com/earth-engine/datasets): search for data sets here
-   [developers.google](https://developers.google.com/earth-engine/tutorials/edu): GEE Guide
:::

## Google Earth Engine Piratical

::: column-body
-   Point= [ee.Geometry.Point](https://developers.google.com/earth-engine/apidocs/ee-geometry-point-coordinates) ; [latlong](https://www.latlong.net/place/chhattisgarh-india-16504.html)
-   To convert into Import record\> place the cursor on the code, there will be no pop-up message
-   Loading data from Landsat.
    -   search\>landsat\>Landsat 9 OLI-2/TIRS-2\>Surface Reflectance\> USGS Landsat 9 Level 2, Collection 2, Tier 1
-   Downloading shp file from gadm
    -   download file from https://gadm.org/download_country.html \> data\> country\> India\> shapefile\> download- dont unzip
-   Do not load multiple layers, just extract the required layers and load them (.shp, .dbf, and .shx files)
-   Load the layers\> click\>view assets\> features\> select the required file

![](images/image-1575475659.png){width="334"}

-   Problems
-   Could not find Delhi layer to filter so chose chhattisgarh

![](images/image-1771088567.png)

-   click on the "map" to inspect
-   function .toUint16() as.glcmTexture won't work with 32 bit data.
-   PCA (read Andy's notes for details)
-   Dont forget to move the point initiziation in the beginning
![](images/image-720891459.png)

-   check max and minimum pixel to avoid the below error, increase the limit- 20e9
![](images/image-929178878.png){width="774"}
-   Error of the band
![](images/image-661185664.png){width="391"}
:::

## Application

::: column-body
Pratical:
:::

## Reflection

::: column-body
:::
